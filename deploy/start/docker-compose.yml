version: "3"

networks: 
  gvb-network:
    driver: bridge
    ipam: 
      config: 
        - subnet: ${SUBNET}

services: 
  gvb-redis:
    image: redis:7.0-alpine
    container_name: gvb-redis
    restart: always
    volumes:
      - ${DATA_DIRECTORY}/data/redis/:/data
    ports:
      - ${REDIS_PORT}:6379 # 内部运行的端口是6379,变量是暴露出去的窗口
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    networks:
      gvb-network:
        ipv4_address: ${REDIS_HOST}
  
  gvb-mysql:
    build: ../build/mysql
    container_name: gvb-mysql
    restart: always
    volumes:
      - ${DATA_DIRECTORY}/data/mysql/:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=Asia/Shanghai
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      gvb-network:
        ipv4_address: ${MYSQL_HOST}
  
  gvb-server:
    build: ../../server
    container_name: gvb-server
    restart: always
    depends_on: 
      gvb-redis:
        condition: service_started
      gvb-mysql:
        condition: service_started
    volumes:
      - ${DATA_DIRECTORY}/file/uploaded:/gvb/public/uploaded
    environment:
    ## 环境变量的配置会覆盖后端中的 config.docker.yml
      - TZ=Asia/Shanghai
      - SERVER_PORT=:${SERVER_PORT}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=3306
      - MYSQL_DBNAME=gvb
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - REDIS_ADDR=${REDIS_HOST}:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      gvb-network:
        ipv4_address: ${BACKEND_HOST}

  gvb-web:
    build: ${WEB_BUILD_CONTEXT}
    container_name: gvb-web
    restart: always
    volumes: 
      - ./server.crt:/etc/nginx/crt/server.crt
      - ./server.key:/etc/nginx/crt/server.key
    environment:
      - USE_HTTPS=${USE_HTTPS}
      - SERVER_NAME=${SERVER_NAME}
      - BACKEND_HOST=${BACKEND_HOST}
      - SERVER_PORT=${SERVER_PORT}
    ports:
      - "80:80"
      - "443:443"
    networks:
      gvb-network:
        ipv4_address: ${FRONTEND_HOST}